言語仕様


定数
	:=	数値定数
	|	文字定数
	;

数値定数
	:=	整数定数
	|	浮動小数点定数
	;

整数定数
	:=	１０進数定数
	|	８進数定数
	|	１６進数定数
	;

符号
	:= ( '+' | '-' )
	;

１０進数定数
	:=	( １０進数値 - '0' ) ( １０進数値 | '_' )*
	|	'0'
	;

８進数定数
	:=	'0' ８進数 ( ８進数 | '_' ) *
	;

１６進数定数
	:=	( "0x" | "0X" ) １６進数 ( １６進数 | '_' )*
	;

浮動小数点定数
	:=	１０進数  ( １０進数 | '_' )* '.' ( １０進数 | '_' )+ ( 'e' | 'E' ) 符号? ( １０進数 | '_' )+
	|	１０進数? ( １０進数 | '_' )* '.' ( １０進数 | '_' )+ ( ( 'e' | 'E' ) 符号? ( １０進数 | '_' )+ )?
	|	１０進数  ( １０進数 | '_' )* '.' ( １０進数 | '_' )* ( ( 'e' | 'E' ) 符号? ( １０進数 | '_' )+ )?
	;

文字定数
	:= '"' ( "\\\"" | ( 任意文字 - '"' ) )* '"'
	;

識別子
	:=	( ( 任意文字 - 符号 - ';' - '"' - 空白 ) ( 任意文字 - 符号 - ';' - 空白 )* ) - 予約語
	;
	
完全修飾識別子
	:=	識別子 ( '.' 完全修飾識別子 )?
	;

コメント
	:=	"//" ( 任意文字 - 行端 )
	|	"/--" ( 任意文字 - "--/" )* "--/"
	|	"/*" ( 任意文字 - "*/" )* "*/"
	;

キーワード
	:=	型宣言キーワード
	|	制御構文キーワード
	|	構造化キーワード
	;

型宣言キーワード
	:=	"integer" "real" "string" "array" "object" "functum" "accessor"
	;

制御構文キーワード
	:=	"if" "switch" "case" "default" "for" "for_each" "while" "do" "continue" "break" "goto"
	;
	
構造化キーワード
	:=	"module" "import"
	; 

// 演算子

代入演算子
	:=	"=" | "+=" | "-=" | "*=" | "/=" | "%="
	;

// 演算

基本演算
	:=	識別子
	|	定数
	|	'(' 演算 ')'
	;
	
後置演算
	:=	基本演算 後置演算修飾子
	;

後置演算修飾子
	:=	( '[' 演算 ']'
		| '(' パラメータ配列? ')'
		| '++'
		| '--'
		) 後置演算修飾子
	| e
	;
	
単項演算
	:=	後置演算
	|	"++" 単項演算
	|	"--" 単項演算
	|	単項演算子 キャスト演算
	;
	
単項演算子
	:= '+' | '-'
	;

キャスト演算
	:=	'(' 型宣言キーワード ')' キャスト演算
	|	単項演算
	;
	
パラメータ配列
	:=	代入演算 ( ',' 代入演算 )*

代入演算
	:=	識別子 代入演算子 ( 定数 | 識別子 )
	|	識別子 代入演算子 演算
	;

機能子
	:=	名前付き機能子
	|	匿名機能子
	;

名前付き機能子
	:=	"functum" identifier パラメータ配列? '{' 構文* '}'
	;

匿名機能子
	:=	'{' 構文* '}' - 構文
	;

// 構文定義

宣言文
	:=	型宣言キーワード 識別子 ';'
	|	型宣言キーワード 識別子 ( ',' 識別子 )* ';'
	|	型宣言キーワード 代入文 ( ',' 代入文 )* ';'
	;

// 制御構文

for構文
	:=	"for" '(' 前置実行構文 ';' 条件式 ';' 後置実行構文 ')' 機能子
	;
	
while構文
	:=	"while" '(' 条件式 ')' 機能子
	;

do_while構文
	:=	"do" 機能子 "while" '(' 条件式 ')' ';'
	;

if構文
	:=	"if" '(' 条件式 ')' 機能子 ( "else" if構文 )* ( "else" 機能子 )?
	；

switch_case構文
	:=	"switch" '(' 演算 ')' '{' ( "case" 識別子 機能子 )* ( "default" 機能子 )? '}'
	;

